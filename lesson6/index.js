// 1. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏—Ç–µ—Ä–∞—Ç–æ—Ä –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º

function random(min, max) {
  return {
    min,
    max,
    next() {
      return {
        done: false,
        value: Math.floor(Math.random() * (this.max - this.min) + this.min),
      };
    },
    [Symbol.iterator]() {
      return this;
    },
  };
}
const randomInt = random(0, 100);

// console.log(randomInt.next());
// console.log(randomInt.next());
// console.log(randomInt.next());
// console.log(randomInt.next());

// 2. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é take, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π
// Iterable –æ–±—ä–µ–∫—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

function take(iter, limit) {
  return {
    index: 0,
    iter,
    limit,
    next() {
      if (this.index < this.limit) {
        this.index++;
        return this.iter.next();
      }
      return {
        done: true,
      };
    },
    [Symbol.iterator]() {
      return this;
    },
  };
}

// console.log("üöÄ ~ iterator:", [...take(randomInt, 15)].length);

// 3. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é filter, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π Iterable –æ–±—ä–µ–∫—Ç –∏ —Ñ—É–Ω–∫—Ü–∏—é-–ø—Ä–µ–¥–∏–∫–∞—Ç.
// –ò –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ —ç–ª–µ–º–µ–Ω—Ç–∞–º –∫–æ—Ç–æ—Ä—ã–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—Ç –ø—Ä–µ–¥–∏–∫–∞—Ç—É.

function filter(iter, cb) {
  return {
    iter,
    cb,
    next() {
      for (const value of this.iter) {
        if (cb(value)) {
          return {
            done: false,
            value,
          };
        }
      }
    },
    [Symbol.iterator]() {
      return this;
    },
  };
}

// console.log([
//   ...take(
//     filter(randomInt, (el) => el > 30),
//     15
//   ),
// ]);

// 4. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é enumerate, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª—é–±–æ–π Iterable –æ–±—ä–µ–∫—Ç –∏
// –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–µ—Ä–∞—Ç–æ—Ä –ø–æ –ø–∞—Ä–∞–º (–Ω–æ–º–µ—Ä –∏—Ç–µ—Ä–∞—Ü–∏–∏, —ç–ª–µ–º–µ–Ω—Ç)

function enumerate(iter) {
  return {
    index: 0,
    iter,
    next() {
      const result = {
        done: false,
        value: [this.index, this.iter.next().value],
      };

      this.index++;

      return result;
    },
    [Symbol.iterator]() {
      return this;
    },
  };
}

// console.log([...take(enumerate(randomInt), 3)]); // [[0, ...], [1, ...], [2, ...]]

// 5. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–ª–∞—Å—Å Range, –∫–æ—Ç–æ—Ä—ã–π –±—ã –ø–æ–∑–≤–æ–ª—è–ª —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω—ã —á–∏—Å–µ–ª –∏–ª–∏ —Å–∏–º–≤–æ–ª–æ–≤,
// –∞ —Ç–∞–∫–∂–µ –ø–æ–∑–≤–æ–ª—è–ª –æ–±—Ö–æ–¥–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã Range —Å –ª—é–±–æ–≥–æ –∫–æ–Ω—Ü–∞

const symbolRange = new Range("a", "f");

console.log(Array.from(symbolRange)); // ['a', 'b', 'c', 'd', 'e', 'f']

const numberRange = new Range(-5, 1);

console.log(Array.from(numberRange.reverse())); // [1, 0, -1, -2, -3, -4, -5]
